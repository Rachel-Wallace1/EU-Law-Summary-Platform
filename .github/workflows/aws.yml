# This workflow will build and push a new container image to Amazon ECR,

# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.

#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
# 2. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.
# 3. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 4. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.

name: Deploy to Amazon ECR

on:
  push:
    branches: [ "devops2" ]
  pull_request:
    branches: [ "devops2" ]

env:
  AWS_REGION: us-west-2                    
  ECS_CLUSTER: ecs-cluster-0330

  ECR_REPOSITORY_BACKEND: backend-ecr     
  ECR_REPOSITORY_FRONTEND: frontend-ecr     

  ECS_SERVICE_BACKEND: eulaw-service-python
  
  TASK-DEF_BACKEND: eulaw-python-task-definition
  CONTAINER_BACKEND: backend                                               
  
  ECS_SERVICE_FRONTEND: eulaw-service-react

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push backend image to Amazon ECR
      id: build-image-backend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Build a docker container and push it to ECR" 
        pwd
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG .
        echo "pushing backend image to ECR"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Build, tag, and push frontend image to Amazon ECR
      id: build-image-frontend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Build a docker container and push it to ECR" 
        pwd
        cd frontend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG .
        echo "pushing backend image to ECR"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Download backend task definition
      run: |
        aws ecs describe-task-definition --task-definition eulaw-python-task-definition --query taskDefinition > task-definition-backend.json
        cat task-definition-backend.json | grep -A 5 containerDefinitions 


    - name: Download frontend task definition
      run: |
        aws ecs describe-task-definition --task-definition eu-task-definition-react --query taskDefinition > task-definition-frontend.json


    - name: For backend app, fill in the new image ID in the Amazon ECS task definition
      id: task-def-backend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition-backend.json
        container-name: python
        image: ${{ steps.build-image-backend.outputs.image }}

    - name: For backend app, deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_BACKEND }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    
    - name: For frontend app, fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition-frontend.json
        container-name: react
        image: ${{ steps.build-image-frontend.outputs.image }}

    - name: For frontend app, deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_FRONTEND }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true







